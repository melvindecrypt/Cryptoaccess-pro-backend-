API Endpoint Specification: sendInternalFunds
This endpoint facilitates instant transfers of funds between users within your platform.
 * Purpose: Allows a logged-in user to send a specified amount of a given currency from their wallet to another user's wallet on the same platform, identified by a username or email.
 * HTTP Method: POST
 * Endpoint URL: /api/wallet/send-internal
 * Authentication:
   * Method: JWT Token in Authorization header (Bearer Token).
   * Authorization: Requires a valid, authenticated user token. No specific role (like admin) is required, as this is a user-to-user action.
 * Request Data:
   * Format: application/json
   * Fields:
     * currency: (String, required) The currency code (e.g., "USD", "NGN", "EUR") of the funds to be sent. Must be a supported currency.
     * amount: (Number, required) The amount of funds to send. Must be a positive number greater than 0.
     * recipientIdentifier: (String, required) The username or email of the recipient user on the platform.
   * Example Request Body:
     {
    "currency": "USD",
    "amount": 50.75,
    "recipientIdentifier": "john.doe@example.com"
}

 * Response Data:
   * Format: application/json
   * Success (HTTP Status: 200 OK):
     * success: (Boolean) true
     * message: (String) "Funds sent successfully to recipient."
     * data: (Object) An empty object {} as the transfer is atomic and complete.
   * Example Success Response:
     {
    "success": true,
    "message": "Funds sent successfully to recipient.",
    "data": {}
}

 * Error Handling:
   * HTTP Status: 400 Bad Request:
     * Reason: Invalid input (e.g., missing currency, amount, recipientIdentifier; amount is zero or negative; unsupported currency; recipient not found; sending to self).
     * formatResponse fields: success: false, message: "Error message".
     * Frontend Action: Display the message to the user.
     * Examples:
       * "Recipient identifier (username or email) is required"
       * "Amount must be positive"
       * "Unsupported currency: BTC"
       * "Insufficient USD balance"
       * "Recipient user not found with provided identifier"
       * "Cannot send funds to yourself"
   * HTTP Status: 401 Unauthorized:
     * Reason: Missing or invalid JWT token. (Handled by authMiddleware.protect).
     * Frontend Action: Redirect user to login page.
   * HTTP Status: 500 Internal Server Error:
     * Reason: Unexpected server-side error (e.g., database connection issue, unhandled exception).
     * formatResponse fields: success: false, message: "An unexpected error occurred during internal fund transfer." (or more specific error from error.message).
     * Frontend Action: Display a generic error message and advise user to try again later or contact support.
 * Data Types:
   * currency: String (e.g., "USD")
   * amount: Number (e.g., 50.75)
   * recipientIdentifier: String (e.g., "username", "email@example.com")
   * success: Boolean
   * message: String
   * data: Object (empty)
 * Sequential Calls: Typically, this is a single API call. Frontend might first call a user lookup endpoint (if available) to verify recipient existence before initiating the transfer.
API Endpoint Specification: requestWithdrawal
This endpoint allows a user to request funds to be sent from their internal wallet to an external address or account.
 * Purpose: Allows a logged-in user to submit a request to withdraw a specified amount of a given currency from their wallet to an external recipient address via a chosen method. The request enters a "PENDING" state.
 * HTTP Method: POST
 * Endpoint URL: /api/wallet/request-withdrawal
 * Authentication:
   * Method: JWT Token in Authorization header (Bearer Token).
   * Authorization: Requires a valid, authenticated user token. No specific role (like admin) is required.
 * Request Data:
   * Format: application/json
   * Fields:
     * currency: (String, required) The currency code (e.g., "USD", "NGN", "EUR") of the funds to be withdrawn.
     * amount: (Number, required) The amount of funds to withdraw. Must be a positive number greater than 0.
     * recipientAddress: (String, required) The external address or account identifier for the withdrawal (e.g., crypto wallet address, bank account number).
     * withdrawalMethod: (String, required) The method of withdrawal (e.g., "bank", "crypto", "paypal").
   * Example Request Body:
     {
    "currency": "USD",
    "amount": 100.00,
    "recipientAddress": "0x123abc...",
    "withdrawalMethod": "crypto"
}

 * Response Data:
   * Format: application/json
   * Success (HTTP Status: 202 Accepted):
     * success: (Boolean) true
     * message: (String) "Withdrawal request initiated successfully. It will be processed shortly."
     * data: (Object)
       * withdrawalId: (String) The ID of the newly created pending withdrawal transaction.
       * status: (String) "PENDING"
   * Example Success Response:
     {
    "success": true,
    "message": "Withdrawal request initiated successfully. It will be processed shortly.",
    "data": {
        "withdrawalId": "65b2e3c0f1d4e5a6b7c8d9e0",
        "status": "PENDING"
    }
}

 * Error Handling:
   * HTTP Status: 400 Bad Request:
     * Reason: Invalid input (e.g., missing currency, amount, recipientAddress, withdrawalMethod; amount is zero or negative; unsupported currency; invalid withdrawalMethod).
     * formatResponse fields: success: false, message: "Error message".
     * Frontend Action: Display the message to the user.
     * Examples:
       * "Recipient address is required"
       * "Amount must be positive"
       * "Valid withdrawal method is required"
       * "Insufficient USD balance"
   * HTTP Status: 401 Unauthorized:
     * Reason: Missing or invalid JWT token. (Handled by authMiddleware.protect).
     * Frontend Action: Redirect user to login page.
   * HTTP Status: 500 Internal Server Error:
     * Reason: Unexpected server-side error.
     * formatResponse fields: success: false, message: "An unexpected error occurred during withdrawal request." (or more specific error from error.message).
     * Frontend Action: Display a generic error message and advise user to try again later or contact support.
 * Data Types:
   * currency: String (e.g., "USD")
   * amount: Number (e.g., 100.00)
   * recipientAddress: String (e.g., "0x123abc...", "GB1234567890")
   * withdrawalMethod: String (e.g., "bank", "crypto", "paypal")
   * success: Boolean
   * message: String
   * data: Object
     * withdrawalId: String (MongoDB ObjectId string)
     * status: String
 * Sequential Calls:
   * User initiates withdrawal (POST to /api/wallet/request-withdrawal).
   * Frontend might subsequently display a "Pending Withdrawals" section, potentially using a GET /api/wallet/transactions?type=withdrawal&status=pending endpoint, to show the status of this request.