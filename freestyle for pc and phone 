I need a complete implementation of full language selection support for my Binance-style web application. Please follow these detailed steps:
> 
1. First-Time Language Selection Modal:
 * On the very first visit to the application (when no language preference is stored), display a modal to the user prompting them to select their preferred language.
 * This modal must be visually consistent with Binance's UI style (consider aspects like typography, color scheme, modal structure, and overall feel).
 * The modal should contain a scrollable list of language options. Each option in the list should display the language name using its native script as provided below:
   * Tamazight (ⵜⴰⵎⴰⵣⵉⵖⵜ)
   * Arabic (العربية)
   * English
   * Spanish (Español)
   * Persian (فارسی)
   * Korean (한국어)
   * French (Français)
   * German (Deutsch)
   * Italian (Italiano)
   * Portuguese (Português)
   * Hindi (हिन्दी)
   * Chinese (中文)
   * Bengali (বাংলা)
   * Russian (русский язык)
   * Japanese (日本語)
   * Urdu (اردو)
   * Indonesian (Bahasa Indonesia/Bahasa Melayu)
   * Marathi (मराठी)
   * Telugu (తెలుగు)
   * Vietnamese (Tiếng Việt)
   * Turkish (Türkçe)
   * Tamil (தமிழ்)
   * Gujarati (ગુજરાતી)
   * Malayalam (മലയാളം)
   * Kannada (ಕನ್ನಡ)
   * Odia (ଓଡ଼ିଆ)
   * Punjabi (ਪੰਜਾਬੀ)
   * Swahili (Kiswahili)
   * Ukrainian (українська мова)
   * Polish (Polski)
   * Yoruba (Yorùbá)
   * Igbo (Igbo)
   * Hausa (Hausa)
   * Filipino (Filipino)
   * Uzbek (Oʻzbek tili)
   * Amharic (አማርኛ)
   * Oromo (Afaan Oromoo)
   * Somali (Af Soomaali)
   * Nepali (नेपाली)
   * Sinhala (සිංහල)
   * Khmer (ភាសាខ្មែរ)
   * Pashto (پښتو)
   * Tajik (тоҷикӣ)
 * The modal should have a clear way for the user to select a language and confirm their choice (e.g., by clicking on a language option or a "Confirm" button).
 * The modal should be fully responsive and mobile-friendly.
2. Saving Language Preference:
 * When the user selects a language and confirms, save a unique, lowercase English key for the selected language (e.g., "tamazight", "arabic", "english", "spanish", etc.) into the browser's localStorage under the key selectedLanguage.
3. language.js File Generation:
 * Create a JavaScript file named language.js.
 * This file should export a JavaScript object named languageOptions.
 * The languageOptions object should map each lowercase English key (as used in localStorage) to its corresponding native language name (as listed in step 1).
   // Example content of language.js
export const languageOptions = {
  tamazight: 'Tamazight (ⵜⴰⵎⴰⵣⵉⵖⵜ)',
  arabic: 'Arabic (العربية)',
  english: 'English',
  spanish: 'Spanish (Español)',
  // ... all other languages
};

4. translations.js File Generation:
 * Create a JavaScript file named translations.js.
 * This file should export a JavaScript object named translations.
 * The translations object will contain keys representing text elements in the app (e.g., "login", "signup", "welcome", "deposit", "withdraw").
 * For each key, provide translations in at least the following sample languages, using the lowercase English language keys as the top-level keys:
   // Example content of translations.js
export const translations = {
  english: {
    login: 'Log In',
    signup: 'Sign Up',
    welcome: 'Welcome',
    deposit: 'Deposit',
    withdraw: 'Withdraw',
    // ... more English translations
  },
  arabic: {
    login: 'تسجيل الدخول',
    signup: 'اشتراك',
    welcome: 'مرحباً',
    deposit: 'إيداع',
    withdraw: 'سحب',
    // ... more Arabic translations
  },
  french: {
    login: 'Se connecter',
    signup: 'S\'inscrire',
    welcome: 'Bienvenue',
    deposit: 'Déposer',
    withdraw: 'Retirer',
    // ... more French translations
  },
  // ... you will add translations for other languages later
};

5. Dynamic Text Display:
 * Upon loading the application, check if localStorage contains a value for selectedLanguage.
 * If it does, use this value to dynamically look up the appropriate translation from the translations object to display text across the application. For example, if selectedLanguage is "arabic", the text for the "login" button should be translations.arabic.login.
 * If localStorage does not contain a value for selectedLanguage, display the language selection modal (as described in step 1).
6. Subsequent Visits:
 * On subsequent visits after a language has been selected and saved in localStorage, the language selection modal should not appear automatically. The application should directly use the language preference stored in localStorage to display the translated text.
7. Language Switching Mechanism:
 * A mechanism for users to change their selected language after the initial selection. This could be a dropdown menu or a similar UI element in the app's settings or navigation. If you include this, the selection should update the selectedLanguage in localStorage and refresh the UI with the new translations.


==================================


Main app pages 
 Landing Page (/): This is the initial page users will see, showcasing the app's features and encouraging them to sign up. It includes the Hero Section, "WHAT WE OFFER," testimonials, etc.
 * Signup (/signup): Users who click "Get Started" or the "Signup" link in the navigation will land on this page to create a new account.
 * Email Verification (Implied): After submitting the signup form, the user will likely see a temporary page or message instructing them to check their email for a verification link. This isn't a dedicated page they stay on for long, but a crucial step in the process.
 * Login (/login): Existing users or those who have verified their email will use this page to log in to their account.
 * Access Fee (/access-fee): New users who have logged in will be directed to this page to pay the one-time $99.90 access fee to unlock the main features of the app.
 * Main Dashboard (/dashboard): Once the access fee is paid (and likely confirmed by the admin in the backend), users will land on their personalized dashboard. This is the central hub where they can see their wallet balances and navigate to other features.
 * Exchange (/exchange): From the dashboard, users can navigate to the exchange section to simulate trading various crypto pairs.
 * Investments (/dashboard > Investments Tab or /investments): Pro+ users (after upgrading and admin approval) will be able to access the investments tab or a dedicated investments page to participate in simulated investment plans.
 * Charts (/charts?coin=...): Users can navigate to a specific chart view for different cryptocurrencies, often by clicking on a coin in their wallet overview.
 * Deposit (/dashboard > Deposit or /deposit): Users can access a page to view the admin's wallet addresses for various cryptocurrencies if they wish to send real payments.
 * Withdraw (/withdraw): Pro+ users who have completed KYC can access the withdrawal page to make simulated withdrawal requests.
 * Settings (/settings): Users can access their settings to manage their profile, language, KYC status, and other preferences.
 * Profile Edit (/profile/edit): Within the settings, users can navigate to edit their personal profile information.
 * KYC Verification (/kyc): Users can access the KYC verification page through the settings to upload their identification documents.
 * Pro+ Upgrade (/pro-plus): Users can navigate to this page to pay the one-time fee to upgrade to the Pro+ tier.
 * Referrals (/settings > Referrals Tab or /referrals): Users can access their referral information and sharing options.
 * Logout (within user dropdown in the header): When a user is finished, they will typically use a logout option in a user dropdown menu (usually in the top right of the header) to securely log out of the application.


===≈================================


Prompt for Bolt.new:

> Create a modal on the access fee payment and Pro+ subscription screens labeled "Upload Payment Proof". This modal should include:

A file upload input labeled "Upload Screenshot/Receipt".

A submit button labeled "Submit Proof" that sends a POST request to /api/payments/upload-proof with the file (key: proof) using multipart/form-data.

On success, show a toast: "Proof uploaded. Pending verification."


Ensure that this file upload is compatible with the existing backend that stores files locally (uploads/paymentProofs) and links uploads to the logged-in user.

Also create a dedicated section inside the Admin Panel for viewing all uploaded proofs. Use /api/payments/admin/proofs to list them with:

User email

Uploaded file (previewable or downloadable)

Status (pending/approved/rejected)

A dropdown to change status, which sends a PUT request to /api/payments/admin/proofs/:id with { status }.


===============================
Areas for Potential Clarification or Consideration (Minor Points):
 * Visual Reference ("Attached Image"): The prompt frequently mentions "Use the attached image as the exact visual reference for the homepage design" and to "maintain and Match the colors, font sizes, spacing, icons, and visual layout...including the placement of any images that were likely present in the original design." In a real-world scenario, the developer would absolutely need this image. Since I am an AI, I cannot see this image. For a developer, this would be the primary guide for the homepage's look and feel.
 * Frontend Framework (Next.js vs. React.js + Vite):
   * The initial line says: "Use Next.js, Tailwind CSS, and ShadCN/UI components..."
   * Later, for "Main User Side," it says "(Frontend: React.js + Vite)".
   * Next.js is a React framework. Vite can also be used with React. This isn't necessarily a contradiction, as a project might use Next.js for some parts (like public-facing pages for SEO) and Vite for a client-rendered dashboard, or it might be a slight overlap in specification. It would be good to clarify if the entire user-facing application should be built with Next.js, or if Vite is intended for a specific part (e.g., the secure dashboard panel). Given ShadCN/UI is often used with Next.js, leaning towards Next.js for the whole user-facing app seems likely.
 * Simulated Live Chart Data Source:
   * For the /exchange tab, it states: "Use CoinGecko’s public API to fetch the current market price every 5–10 seconds. Generate a fake dataset of chart points that fluctuates slightly around the current price..." This is a clear instruction for one part.
   * For the /dashboard > Charts Tab, it says: "Static Data Only... Fake line/bar charts for BTC, ETH, etc... Random historical data." This is also clear.
   * The distinction is good, just ensuring the developer applies the correct approach to the correct section.
 * Local Storage for KYC Uploads: "KYC uploads should be stored locally (no cloud)." This is a very important security/privacy consideration. "Locally" here likely means on the admin's system after being transmitted, or perhaps temporarily on the client before secure transmission if the backend handles it. For the frontend, it means facilitating the upload to the designated (presumably secure) backend endpoint. The frontend itself wouldn't permanently store KYC documents. The backend being complete implies it has a mechanism for receiving and managing these.
 * "Real wallet addresses must appear clearly where required": This is well-stated and the addresses are provided, which is good.
 * Admin Side Out of Scope: The prompt clearly states, "Admin dashboard (secured route, not part of this frontend scope)" and later "Admin Side (Admin Panel Overview)... All /admin/* routes are protected...". However, it then details the Admin UI Design Requirements and Functional Specs extensively. While useful for context (understanding what the frontend is interacting with from an admin perspective), a frontend developer might initially be confused if they should be building any part of this. Reconfirming that absolutely no admin UI is to be built by the frontend developer for this specific task would be good, though the backend handling is already confirmed. The detailed admin specs seem more like a design document for the existing backend's admin panel.
What I Think (Summary):
This prompt is exceptionally well-crafted for a frontend developer. It's detailed, clear, and provides a strong vision for the application. A developer receiving this would have a very solid understanding of what needs to be built. The primary missing piece for actual execution would be the visual reference image. The minor point about Next.js vs. Vite is easily clarified.
If this prompt were given to a frontend developer along with the mentioned visual assets and API documentation for the existing backend, they would be well-equipped to build CryptoAccess Pro to the desired specifications. It demonstrates a good understanding of the product and the information a developer needs.


solution 
change that react.js plus vite to next.js only answer specify that it would be used to build the entire app
you can add vite to the admin Side for the creation of the secure panel

read and merge this part 

This project involves building the complete frontend for a cryptocurrency application, CryptoAccess Pro, using the Bolt.New platform. This includes both the user-facing side and a secure administrator panel for managing user access and payment approvals. The backend, built with Node.js, is already complete and provides API endpoints that this frontend will consume.

API Communication: Utilize Bolt.New's built-in tools or any custom code capabilities it offers to make HTTP requests to the existing Node.js backend API endpoints.
II. Key Principles:
 * Backend Integration: The primary task is to build the frontend to connect seamlessly with the pre-existing Node.js backend API for both user and admin functionalities.
 * Simulation Focus (User Side): Cryptocurrency trading, balances, and investments within the user frontend are simulations. Real payments will be directed to the provided admin wallet addresses but the frontend's representation of these is for user access unlocking and Pro+ upgrades.
 * Real Wallet Addresses: Ensure the provided real wallet addresses appear clearly on the /deposit page.